// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cxx_convert_maf_to_fasta
void cxx_convert_maf_to_fasta(std::string maf_file, std::string species_file, std::string chrom_size_file, std::string output_folder, std::string reference_species, size_t buffer_limit_mb);
RcppExport SEXP _TiMEstamp_cxx_convert_maf_to_fasta(SEXP maf_fileSEXP, SEXP species_fileSEXP, SEXP chrom_size_fileSEXP, SEXP output_folderSEXP, SEXP reference_speciesSEXP, SEXP buffer_limit_mbSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type maf_file(maf_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type species_file(species_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type chrom_size_file(chrom_size_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_folder(output_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type reference_species(reference_speciesSEXP);
    Rcpp::traits::input_parameter< size_t >::type buffer_limit_mb(buffer_limit_mbSEXP);
    cxx_convert_maf_to_fasta(maf_file, species_file, chrom_size_file, output_folder, reference_species, buffer_limit_mb);
    return R_NilValue;
END_RCPP
}
// cxx_fasta_gaps_to_bed
void cxx_fasta_gaps_to_bed(Rcpp::CharacterVector fasta_files, std::string bed_out, int min_gap_inclusive);
RcppExport SEXP _TiMEstamp_cxx_fasta_gaps_to_bed(SEXP fasta_filesSEXP, SEXP bed_outSEXP, SEXP min_gap_inclusiveSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fasta_files(fasta_filesSEXP);
    Rcpp::traits::input_parameter< std::string >::type bed_out(bed_outSEXP);
    Rcpp::traits::input_parameter< int >::type min_gap_inclusive(min_gap_inclusiveSEXP);
    cxx_fasta_gaps_to_bed(fasta_files, bed_out, min_gap_inclusive);
    return R_NilValue;
END_RCPP
}
// cxx_merge_ranges
IntegerVector cxx_merge_ranges(const IntegerVector chrom, const IntegerVector start, const IntegerVector end, const IntegerVector strand, const IntegerVector grp, const IntegerVector tol);
RcppExport SEXP _TiMEstamp_cxx_merge_ranges(SEXP chromSEXP, SEXP startSEXP, SEXP endSEXP, SEXP strandSEXP, SEXP grpSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type chrom(chromSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type end(endSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cxx_merge_ranges(chrom, start, end, strand, grp, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TiMEstamp_cxx_convert_maf_to_fasta", (DL_FUNC) &_TiMEstamp_cxx_convert_maf_to_fasta, 6},
    {"_TiMEstamp_cxx_fasta_gaps_to_bed", (DL_FUNC) &_TiMEstamp_cxx_fasta_gaps_to_bed, 3},
    {"_TiMEstamp_cxx_merge_ranges", (DL_FUNC) &_TiMEstamp_cxx_merge_ranges, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_TiMEstamp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
